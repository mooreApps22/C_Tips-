ADDRESS ARITHMETIC 

- Address Arithmetic are arithmetic operations that can be performed on pointers
- Two of the most basic operations include: 
  ~ If p is a pointer to some element, then p++ points to the next element 
  ~ And p+= i would move i elements from where it currently is 
  
 
 Ex: 
    int arr[5] = {1, 2, 3, 4, 5};
    int *ptr = &arr[0];

    ptr++; // move the pointer to the next integer

  Ex: 
    int arr[5] = {1, 2, 3, 4, 5};
    int *ptr = &arr[4];

    ptr--; // move the pointer to the previous integer

  Ex:  
    int arr[5] = {1, 2, 3, 4, 5};
    int *ptr = &arr[0];

    ptr = ptr + 2; // move the pointer two positions ahead


  Ex:
    int arr[5] = {1, 2, 3, 4, 5};
    int *ptr = &arr[4];

    ptr = ptr - 2; // move the pointer two positions back

  Ex: 
    int arr[5] = {10, 20, 30, 40, 50};    // arr is an array of 5 elements 
    int *ptr1 = &arr[0];                  // ptr2 points to element 0 
    int *ptr2 = &arr[4];                  // ptr1 points to element 4
    int d = ptr2 - ptr1;                  // d is now 4
    int e = *ptr2 - *ptr0;                // e is now 40 
    
  Ex: 
      int s_len(char *s) {        // func declaration 
        char *p = s;              // p points to the array name(1st element) 
        while (*p != '\0')        // sets up a loop which iterates through s 
          p++;                    // goes to the next element 
        return p - s;             // subtracts the last element from the first element 
      }
    
